/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.cyfirma.core.service.impl;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Map.Entry;

import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import com.aliasi.classify.Classification;
import com.aliasi.classify.Classified;
import com.aliasi.classify.ConfusionMatrix;
import com.aliasi.classify.DynamicLMClassifier;
import com.aliasi.classify.JointClassification;
import com.aliasi.classify.JointClassifier;
import com.aliasi.classify.JointClassifierEvaluator;
import com.aliasi.lm.NGramProcessLM;
import com.aliasi.util.AbstractExternalizable;

/**
 *
 * @author Asif
 */
public class ExcelTestImpl {

	/**
	 * @param args the command line arguments
	 */
	@SuppressWarnings("deprecation")

	private static String[] CATEGORIES = { "Emerging Threats ", "MegaCart", "Cyber Insights",
			"Cyber Hacks and Incidents","Updated","Emerging Threats","Changed","Duplicate","Emergency Threats and Cyber Attacks",
			"Emerging Threats and Cyber Attacks","Emerging Threats and Cyberattacks","Emerging Threats and Cyberattaks",
			"No changes","No Changes"
			};

	private static int NGRAM_SIZE = 3;

	public static void main(String[] args) {

		try {
			FileInputStream file = new FileInputStream(new File(
					"C:\\Users\\tahsin.asif\\OneDrive - Antuit India Private Limited\\Asif\\AI\\VinodNewsContent\\TestFile.xlsx"));

			// Create Workbook instance holding reference to .xlsx file
			XSSFWorkbook workbook = new XSSFWorkbook(file);

			// Get first/desired sheet from the workbook
			XSSFSheet sheet = workbook.getSheetAt(0);

			// Iterate through each rows one by one
			Iterator<Row> rowIterator = sheet.iterator();
			Map<String, String> exMap = new HashMap<>();
			String key = "";
			String value = "";
			// Classification classification = null;
			DynamicLMClassifier<NGramProcessLM> classifier = DynamicLMClassifier.createNGramProcess(CATEGORIES,
					NGRAM_SIZE);
			while (rowIterator.hasNext()) {
				Row row = rowIterator.next();
				// For each row, iterate through all the columns
				Iterator<Cell> cellIterator = row.cellIterator();

				while (cellIterator.hasNext()) {
					Cell cell = cellIterator.next();
					// Check the cell type and format accordingly
					// System.out.println(cell.getColumnIndex());
					// System.out.println(cell.getStringCellValue());
					switch (cell.getCellType())

					{
					case Cell.CELL_TYPE_NUMERIC:
						System.out.print(cell.getNumericCellValue() + "----> ");

						break;
					case Cell.CELL_TYPE_STRING:
						// System.out.println(cell.getColumnIndex());
						System.out.print(cell.getStringCellValue() + "----");
						// System.out.println(cell.getColumnIndex());
						if (cell.getColumnIndex() == 1) {
							// System.out.println("Key ----->"+ cell.getStringCellValue());
							key = cell.getStringCellValue();
						}
						if (cell.getColumnIndex() == 2) {
							// System.out.println("Value ----->"+ cell.getStringCellValue());
							value = cell.getStringCellValue();
						}
						exMap.put(key, value);
						break;
					}

				}
				System.out.println("");
			}
			ArrayList<String> valueList = new ArrayList<String>(exMap.values());

			// DynamicLMClassifier<NGramProcessLM> classifier
			// = DynamicLMClassifier.createNGramProcess((String[])
			// exMap.values().toArray((new String[exMap.size()])),NGRAM_SIZE);
			int count = 0;
			for (int i = 0; i < CATEGORIES.length; ++i) {
				Classification classification = new Classification(CATEGORIES[i]);

				for (Map.Entry<String, String> entry : exMap.entrySet()) {

					// System.out.println("Key---->"+entry.getKey() +"\t"
					// +"Value--->"+entry.getValue());

					if (entry.getValue().equals(CATEGORIES[i])) {
						
						System.out.println("Sno"+count +"Training on " + CATEGORIES[i] + "/" + entry.getValue());
					//	System.out.println("Value Category " + entry.getValue() + "CATEGORIES" + CATEGORIES[i]);
						Classified<CharSequence> classified = new Classified<CharSequence>(entry.getKey(),
								classification);
						classifier.handle(classified);
						count++;

					}
				}
			}
			// compiling
			System.out.println("Compiling");
			@SuppressWarnings("unchecked") // we created object so know it's safe
			JointClassifier<CharSequence> compiledClassifier = (JointClassifier<CharSequence>) AbstractExternalizable
					.compile(classifier);

			boolean storeCategories = true;
			JointClassifierEvaluator<CharSequence> evaluator = new JointClassifierEvaluator<CharSequence>(
					compiledClassifier, CATEGORIES, storeCategories);

			String text = "What This Massive Security Vulnerability Taught the Tech World";

			JointClassification jc = compiledClassifier.classify(text);

			String bestCategory = jc.bestCategory();
			System.out.println("Got best category of: " + bestCategory);
			ConfusionMatrix confMatrix = evaluator.confusionMatrix();
			// System.out.println("Total Accuracy: " + confMatrix.totalAccuracy());

			// System.out.println("\nFULL EVAL");
			// System.out.println(evaluator);
			file.close();
		} catch (Exception e) {
			e.printStackTrace();
		}

	}
}
